// command code


//const { Command } = require("reconlx");
//const ee = require("../../settings/embed.json");
//const config = require("../../settings/config.json");
const {
  MessageEmbed,
  CommandInteraction,
  MessageActionRow,
  MessageSelectMenu,
} = require("discord.js");

module.exports = {
  name: "selfrole",
  aliases: [],
  edesc: "role @user(optional)",
  description: `setup selfrole`,
  userPermissions: [],
  botPermissions: [],
  category: "Setup",
  cooldown: 5,

  run: async (client, message, args, prefix) => {

   color = client.main

    //code

    const arrayOfRoles = [];
    let counter = 0;
    let filtermsg = (m) => m.author.id === message.user.id;
    let embed = new MessageEmbed().setColor("RANDOM");

    let mainMsg = await message.channel.send({
      embeds: [new MessageEmbed().setTitle(`STARTED NOW`)],
    });

    ask_addrole();

    async function ask_addrole() {
      counter++;
      if (counter === 23) {
/* message.followUp(
          ` ** ❌ You reached the maximum amount of Roles! **`
        );
        return Finsihed(interaction);*/
      }
      await mainMsg
        .edit({
          embeds: [
            embed
              .setTitle(`What should be the **${counter}** Role?`)
              .setDescription(
                "Enter `finish`, if you are finished with your Roles!"
              ),
          ],
        })
        .then(async (msg) => {
          await msg.channel
            .awaitMessages({
              max: 1,
              time: 180000,
              errors: ["TIME"],
              filter: filtermsg,
            })
            .then((collected) => {
              collected
                .first()
                .delete()
                .catch((e) => {});
              if (collected.first().content.toLowerCase() === "finish") {
                return Finsihed(interaction);
              } else {
                let role = collected.first().mentions.roles.first();
                switch (counter) {
                  case 1:
                    arrayOfRoles.push(role.name);
                    break;
                  case 2:
                    arrayOfRoles.push(role.name);
                    break;
                  case 3:
                    arrayOfRoles.push(role.name);
                    break;
                  case 4:
                    arrayOfRoles.push(role.name);
                    break;
                  case 5:
                    arrayOfRoles.push(role.name);
                    break;
                  case 6:
                    arrayOfRoles.push(role.name);
                    break;
                  case 7:
                    arrayOfRoles.push(role.name);
                    break;
                  case 8:
                    arrayOfRoles.push(role.name);
                    break;
                  case 9:
                    arrayOfRoles.push(role.name);
                    break;
                  case 10:
                    arrayOfRoles.push(role.name);
                    break;
                  case 11:
                    arrayOfRoles.push(role.name);
                    break;
                  case 12:
                    arrayOfRoles.push(role.name);
                    break;
                  case 13:
                    arrayOfRoles.push(role.name);
                    break;
                  case 14:
                    arrayOfRoles.push(role.name);
                    break;
                  case 15:
                    arrayOfRoles.push(role.name);
                    break;
                  case 16:
                    arrayOfRoles.push(role.name);
                    break;
                  case 17:
                    arrayOfRoles.push(role.name);
                    break;
                  case 18:
                    arrayOfRoles.push(role.name);
                    break;
                  case 19:
                    arrayOfRoles.push(role.name);
                    break;
                  case 20:
                    arrayOfRoles.push(role.name);
                    break;
                  case 21:
                    arrayOfRoles.push(role.name);
                    break;
                  case 22:
                    arrayOfRoles.push(role.name);
                    break;
                  case 23:
                    arrayOfRoles.push(role.name);
                    break;
                }
                ask_addrole();
              }
            })
            /*.catch((error) => {
              return interaction.followUp(`TIMEOUT`);
            });*/
        });
    }

    function Finsihed(interaction) {
      // code
      message.channel.send(`ROLES DONE`);
      self_roles(interaction, arrayOfRoles);
    }
    /**
     *
     * @param {CommandInteraction} interaction
     * @param {Array} roles
     */
    async function self_roles(interaction, roles) {
      if (!roles || !interaction)
        throw new Error("Please provide the required arguments!");
      if (roles.length > 25)
        throw new Error(
          "The amount of selections for the menu should be lesser than or equal to 25!"
        );

      let arr = [];

      roles.forEach((role) => {
        arr.push({
          label: role.charAt(0).toUpperCase() + role.slice(1),
          description: `Select to Get  ${role}`,
          value: role,
        });
      });

      let selectMenu = await Create_menu({
        id: "Self-roles",
        placeHolder: "Select Your Role!",
        array: arr,
      });
      interaction.channel.send({
        content: "Select your self-role!!",
        components: [selectMenu],
      });
    }

    async function Create_menu({ id, placeHolder, array }) {
      if (!id || !array)
        throw new Error(
          "The options were not provided! Make sure you provide all the options!"
        );
      //if(typeof roles != 'object') throw new Error(chalk.red.bold('Please provide the roles as an array!'));
      if (array.length < 0)
        throw new Error(`The array has to have atleast one thing to select!`);
      let select_menu;

      placeHolder = placeHolder ? placeHolder : "Nothing Selected";
      array.forEach((item) => {
        if (!item.label)
          throw new Error(
            `The array must have objects, with the following options: (label, description and value) !!`
          );
        if (!item.description)
          throw new Error(
            `The array must have objects, with the following options: (label, description and value) !!`
          );
        if (!item.value)
          throw new Error(
            `The array must have objects, with the following options: (label, description and value) !!`
          );
      });

      select_menu = new MessageActionRow().addComponents(
        new MessageSelectMenu()
          .setCustomId(id)
          .setPlaceholder(placeHolder)
          .addOptions(array)
      );

      return select_menu;
    }
  },
});




// interaction event code

const client = require("../index");

client.on("interactionCreate", async (interaction) => {
  if (!interaction.guild || interaction.user.bot) return;
  if (interaction.isSelectMenu()) {
    await interaction.deferUpdate().catch((e) => {});
    if (interaction.customId === "Self-roles") {
      let value = interaction.values[0];
      let role = interaction.guild.roles.cache.find(
        (r) => r.name.toLowerCase() === value.toLowerCase()
      );
      if (!role) {
        role = await interaction.guild.roles.create({
          name: value,
          permissions: ["SEND_MESSAGES", "VIEW_CHANNEL"],
        });
      }

      if (!interaction.member.roles.cache.has(role.id)) {
        await interaction.member.roles.add(role.id);
        interaction.followUp({
          content: `You Got ${role} Role`,
          ephemeral: true,
        });
      } else {
        await interaction.member.roles.remove(role.id);
        interaction.followUp({
          content: `You Lost ${role} Role`,
          ephemeral: true,
        });
      }
    }
  }
});
